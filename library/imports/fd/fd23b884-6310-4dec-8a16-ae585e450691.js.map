{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "const Constants = require('Constants');\r\nconst CHESS_TYPE = Constants.CHESS_TYPE;\r\nconst STAND = Constants.STAND;\r\nconst GAME_STATE = Constants.GAME_STATE;\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        COL: 8,\r\n        ROW: 8,\r\n        chessPrefab: cc.Prefab,\r\n        chesses: []\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        G.chessManager = this;\r\n        this.chessWidth = this.node.width / this.COL;\r\n        for (let x = 0; x < this.COL; x++) {\r\n            this.chesses[x] = [];\r\n            for (let y = 0; y < this.ROW; y++) {\r\n                let chessNode = cc.instantiate(this.chessPrefab);\r\n                chessNode.parent = this.node;\r\n                chessNode.width = this.chessWidth - 5;\r\n                chessNode.height = this.chessWidth - 5;\r\n                chessNode.position = cc.p(this.chessWidth / 2 + x * this.chessWidth, this.chessWidth / 2 + y * this.chessWidth);\r\n                let chess = chessNode.getComponent('Chess');\r\n                chess.coor = cc.p(x, y);\r\n                this.chesses[x][y] = chess;\r\n                this.addTouchEvent(chess);\r\n            }\r\n        }\r\n        this.chesses[3][3].type = CHESS_TYPE.BLACK;\r\n        this.chesses[3][4].type = CHESS_TYPE.WHITE;\r\n        this.chesses[4][4].type = CHESS_TYPE.BLACK;\r\n        this.chesses[4][3].type = CHESS_TYPE.WHITE;\r\n        G.gameManager.startGame();\r\n        let self = this;\r\n        G.roomSocket.on('update chessboard', function (chessCoor) {\r\n            self.fallChess(self.chesses[chessCoor.x][chessCoor.y]);\r\n        });\r\n        G.roomSocket.on('change turn', function () {\r\n            G.gameManager.changeTurn();\r\n        });\r\n        G.roomSocket.on('force change turn', function () {\r\n            G.gameManager.forceChangeTurn();\r\n        });\r\n    },\r\n\r\n    addTouchEvent(chess) {\r\n        let self = this;\r\n        chess.node.on('touchend', function (e) {\r\n            if (G.gameManager.gameState === GAME_STATE.PLAYING && G.gameManager.turn === G.stand) {\r\n                if (chess.type === CHESS_TYPE.NONE) {\r\n                    for (let dir = 1; dir <= 8; dir++) {\r\n                        if (self.judgePass(G.gameManager.turn, chess, dir)) {\r\n                            self.fallChess(chess);\r\n                            G.roomSocket.emit('update chessboard', chess.coor);\r\n                            break;\r\n                        }\r\n                        if (dir === 8) {\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n        });\r\n    },\r\n\r\n    fallChess(chess) {\r\n        if (G.gameManager.turn === STAND.BLACK) {\r\n            chess.type = CHESS_TYPE.BLACK;\r\n        } else if (G.gameManager.turn === STAND.WHITE) {\r\n            chess.type = CHESS_TYPE.WHITE;\r\n        }\r\n        for (let dir = 1; dir <= 8; dir++) {\r\n            if (this.judgePass(G.gameManager.turn, chess, dir)) {\r\n                this.changePass(chess, dir);\r\n            }\r\n        }\r\n        G.gameManager.updateScore();\r\n        G.gameManager.changeTurn();\r\n        this.judgeWin();\r\n    },\r\n\r\n    nearChess(chess, dir) {\r\n        switch (dir) {\r\n            case 1://left\r\n                if (chess.coor.x !== 0) {\r\n                    return this.chesses[chess.coor.x - 1][chess.coor.y];\r\n                }\r\n                break;\r\n            case 2://left up\r\n                if (chess.coor.x !== 0 && chess.coor.y !== this.ROW - 1) {\r\n                    return this.chesses[chess.coor.x - 1][chess.coor.y + 1];\r\n                }\r\n                break;\r\n            case 3://up\r\n                if (chess.coor.y !== this.ROW - 1) {\r\n                    return this.chesses[chess.coor.x][chess.coor.y + 1];\r\n                }\r\n                break;\r\n            case 4://right up\r\n                if (chess.coor.x !== this.COL - 1 && chess.coor.y !== this.ROW - 1) {\r\n                    return this.chesses[chess.coor.x + 1][chess.coor.y + 1];\r\n                }\r\n                break;\r\n            case 5://right\r\n                if (chess.coor.x !== this.COL - 1) {\r\n                    return this.chesses[chess.coor.x + 1][chess.coor.y];\r\n                }\r\n                break;\r\n            case 6://right down\r\n                if (chess.coor.x !== this.COL - 1 && chess.coor.y !== 0) {\r\n                    return this.chesses[chess.coor.x + 1][chess.coor.y - 1];\r\n                }\r\n                break;\r\n            case 7://down\r\n                if (chess.coor.y !== 0) {\r\n                    return this.chesses[chess.coor.x][chess.coor.y - 1];\r\n                }\r\n                break;\r\n            case 8://left down\r\n                if (chess.coor.x !== 0 && chess.coor.y !== 0) {\r\n                    return this.chesses[chess.coor.x - 1][chess.coor.y - 1];\r\n                }\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        return null;\r\n    },\r\n\r\n    judgePass(stand, chess, dir) {\r\n        let tempChess = chess;\r\n        tempChess = this.nearChess(chess, dir);\r\n        if (tempChess === null) {\r\n            return false;\r\n        }\r\n        while (tempChess.type === -stand) {\r\n            tempChess = this.nearChess(tempChess, dir);\r\n            if (tempChess === null) {\r\n                return false;\r\n            }\r\n            if (tempChess.type == stand) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    },\r\n\r\n    changePass(chess, dir) {\r\n        let tempChess = this.nearChess(chess, dir);\r\n        while (tempChess.type === -G.gameManager.turn) {\r\n            tempChess.type = chess.type;\r\n            tempChess = this.nearChess(tempChess, dir);\r\n        }\r\n    },\r\n\r\n    judgeMoveAble(stand) {//判断stand是否有可落子的地方\r\n        let tryChess = null;\r\n        for (let x = 0; x < this.COL; x++) {\r\n            for (let y = 0; y < this.ROW; y++) {\r\n                tryChess = this.chesses[x][y];\r\n                if (tryChess.type === CHESS_TYPE.NONE) {\r\n                    for (let dir = 1; dir <= 8; dir++) {\r\n                        if (this.judgePass(stand, tryChess, dir)) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    },\r\n\r\n    judgeWin() {\r\n        let selfMoveAble = this.judgeMoveAble(G.gameManager.turn);\r\n        let oppoMoveAble = this.judgeMoveAble(-G.gameManager.trun);\r\n        if (selfMoveAble) {\r\n            return;\r\n        } else if (!selfMoveAble && oppoMoveAble) {\r\n            cc.log('can not move next turn');\r\n            G.gameManager.forceChangeTurn();\r\n            G.roomSocket.emit('force change turn');\r\n        } else if (!selfMoveAble && !oppoMoveAble) {\r\n            cc.log('both can not move someone win');\r\n            G.gameManager.endGame();\r\n        }\r\n    },\r\n\r\n    getChessCount(){\r\n        let blackChess = 0;\r\n        let whiteChess = 0;\r\n        for (let x = 0; x < this.chesses.length; x++) {\r\n            for (let y = 0; y < this.chesses[x].length; y++) {\r\n                if (this.chesses[x][y].type === CHESS_TYPE.BLACK) {\r\n                    blackChess++;\r\n                } else if (this.chesses[x][y].type === CHESS_TYPE.WHITE) {\r\n                    whiteChess++;\r\n                }\r\n            }\r\n        }\r\n        return [blackChess,whiteChess];\r\n    }\r\n});\r\n"
  ]
}