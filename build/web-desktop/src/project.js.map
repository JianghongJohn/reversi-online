{"version":3,"sources":["resources/app.asar/node_modules/browser-pack/_prelude.js","scripts/manager/ChessManager.js","project.js","scripts/cell/Chess.js","scripts/util/Constants.js","scripts/manager/GameManager.js","scripts/util/Global.js","scripts/manager/MatchManager.js","scripts/manager/MenuManager.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length","ChessManager","module","cc","_RFpush","Constants","CHESS_TYPE","STAND","GAME_STATE","Class","extends","Component","properties","COL","ROW","chessPrefab","Prefab","chesses","onLoad","G","chessManager","this","chessWidth","node","width","x","y","chessNode","instantiate","parent","height","position","p","chess","getComponent","coor","addTouchEvent","type","BLACK","WHITE","gameManager","startGame","self","roomSocket","on","chessCoor","fallChess","changeTurn","forceChangeTurn","log","gameState","PLAYING","turn","stand","NONE","dir","judgePass","emit","changePass","updateScore","judgeWin","nearChess","tempChess","judgeMoveAble","tryChess","selfMoveAble","oppoMoveAble","trun","endGame","getChessCount","blackChess","whiteChess","_RFpop","Chess","pics","default","SpriteFrame","_type","get","set","value","Sprite","spriteFrame","chance","Enum","PREPARE","OVER","DIR","LEFT","LEFT_UP","UP","RIGHT_UP","RIGHT","RIGHT_DOWN","DOWN","LEFT_DOWN","GameManager","blackScoreLabel","Label","whiteScoreLabel","infoPanel","Node","infoLabel","infoAnimation","Animation","showInfo","onFinished","disconnect","director","loadScene","chessCount","string","play","Global","window","globalSocket","hallSocket","queueSocket","MatchManager","io","connect","force new connection","roomId","onBtnCancel","MenuManager","onBtnStart"],"mappings":"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","file":"project.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\ncc._RFpush(module, 'fd23biEYxBN7IoWrlheRQaR', 'ChessManager');\n// scripts\\manager\\ChessManager.js\n\nvar Constants = require('Constants');\nvar CHESS_TYPE = Constants.CHESS_TYPE;\nvar STAND = Constants.STAND;\nvar GAME_STATE = Constants.GAME_STATE;\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        COL: 8,\n        ROW: 8,\n        chessPrefab: cc.Prefab,\n        chesses: []\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        G.chessManager = this;\n        this.chessWidth = this.node.width / this.COL;\n        for (var x = 0; x < this.COL; x++) {\n            this.chesses[x] = [];\n            for (var y = 0; y < this.ROW; y++) {\n                var chessNode = cc.instantiate(this.chessPrefab);\n                chessNode.parent = this.node;\n                chessNode.width = this.chessWidth - 5;\n                chessNode.height = this.chessWidth - 5;\n                chessNode.position = cc.p(this.chessWidth / 2 + x * this.chessWidth, this.chessWidth / 2 + y * this.chessWidth);\n                var chess = chessNode.getComponent('Chess');\n                chess.coor = cc.p(x, y);\n                this.chesses[x][y] = chess;\n                this.addTouchEvent(chess);\n            }\n        }\n        this.chesses[3][3].type = CHESS_TYPE.BLACK;\n        this.chesses[3][4].type = CHESS_TYPE.WHITE;\n        this.chesses[4][4].type = CHESS_TYPE.BLACK;\n        this.chesses[4][3].type = CHESS_TYPE.WHITE;\n        G.gameManager.startGame();\n        var self = this;\n        G.roomSocket.on('update chessboard', function (chessCoor) {\n            self.fallChess(self.chesses[chessCoor.x][chessCoor.y]);\n        });\n        G.roomSocket.on('change turn', function () {\n            G.gameManager.changeTurn();\n        });\n        G.roomSocket.on('force change turn', function () {\n            G.gameManager.forceChangeTurn();\n        });\n    },\n\n    addTouchEvent: function addTouchEvent(chess) {\n        var self = this;\n        chess.node.on('touchend', function (e) {\n            cc.log('!!!!!');\n            if (G.gameManager.gameState === GAME_STATE.PLAYING && G.gameManager.turn === G.stand) {\n                if (chess.type === CHESS_TYPE.NONE) {\n                    for (var dir = 1; dir <= 8; dir++) {\n                        if (self.judgePass(G.gameManager.turn, chess, dir)) {\n                            self.fallChess(chess);\n                            G.roomSocket.emit('update chessboard', chess.coor);\n                            break;\n                        }\n                        if (dir === 8) {\n                            return;\n                        }\n                    }\n                }\n            }\n        });\n    },\n\n    fallChess: function fallChess(chess) {\n        if (G.gameManager.turn === STAND.BLACK) {\n            chess.type = CHESS_TYPE.BLACK;\n        } else if (G.gameManager.turn === STAND.WHITE) {\n            chess.type = CHESS_TYPE.WHITE;\n        }\n        for (var dir = 1; dir <= 8; dir++) {\n            if (this.judgePass(G.gameManager.turn, chess, dir)) {\n                this.changePass(chess, dir);\n            }\n        }\n        G.gameManager.updateScore();\n        G.gameManager.changeTurn();\n        this.judgeWin();\n    },\n\n    nearChess: function nearChess(chess, dir) {\n        switch (dir) {\n            case 1:\n                //left\n                if (chess.coor.x !== 0) {\n                    return this.chesses[chess.coor.x - 1][chess.coor.y];\n                }\n                break;\n            case 2:\n                //left up\n                if (chess.coor.x !== 0 && chess.coor.y !== this.ROW - 1) {\n                    return this.chesses[chess.coor.x - 1][chess.coor.y + 1];\n                }\n                break;\n            case 3:\n                //up\n                if (chess.coor.y !== this.ROW - 1) {\n                    return this.chesses[chess.coor.x][chess.coor.y + 1];\n                }\n                break;\n            case 4:\n                //right up\n                if (chess.coor.x !== this.COL - 1 && chess.coor.y !== this.ROW - 1) {\n                    return this.chesses[chess.coor.x + 1][chess.coor.y + 1];\n                }\n                break;\n            case 5:\n                //right\n                if (chess.coor.x !== this.COL - 1) {\n                    return this.chesses[chess.coor.x + 1][chess.coor.y];\n                }\n                break;\n            case 6:\n                //right down\n                if (chess.coor.x !== this.COL - 1 && chess.coor.y !== 0) {\n                    return this.chesses[chess.coor.x + 1][chess.coor.y - 1];\n                }\n                break;\n            case 7:\n                //down\n                if (chess.coor.y !== 0) {\n                    return this.chesses[chess.coor.x][chess.coor.y - 1];\n                }\n                break;\n            case 8:\n                //left down\n                if (chess.coor.x !== 0 && chess.coor.y !== 0) {\n                    return this.chesses[chess.coor.x - 1][chess.coor.y - 1];\n                }\n                break;\n\n            default:\n                break;\n        }\n        return null;\n    },\n\n    judgePass: function judgePass(stand, chess, dir) {\n        var tempChess = chess;\n        tempChess = this.nearChess(chess, dir);\n        if (tempChess === null) {\n            return false;\n        }\n        while (tempChess.type === -stand) {\n            tempChess = this.nearChess(tempChess, dir);\n            if (tempChess === null) {\n                return false;\n            }\n            if (tempChess.type == stand) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    changePass: function changePass(chess, dir) {\n        var tempChess = this.nearChess(chess, dir);\n        while (tempChess.type === -G.gameManager.turn) {\n            tempChess.type = chess.type;\n            tempChess = this.nearChess(tempChess, dir);\n        }\n    },\n\n    judgeMoveAble: function judgeMoveAble(stand) {\n        //判断stand是否有可落子的地方\n        var tryChess = null;\n        for (var x = 0; x < this.COL; x++) {\n            for (var y = 0; y < this.ROW; y++) {\n                tryChess = this.chesses[x][y];\n                if (tryChess.type === CHESS_TYPE.NONE) {\n                    for (var dir = 1; dir <= 8; dir++) {\n                        if (this.judgePass(stand, tryChess, dir)) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    },\n\n    judgeWin: function judgeWin() {\n        var selfMoveAble = this.judgeMoveAble(G.gameManager.turn);\n        var oppoMoveAble = this.judgeMoveAble(-G.gameManager.trun);\n        if (selfMoveAble) {\n            return;\n        } else if (!selfMoveAble && oppoMoveAble) {\n            cc.log('can not move next turn');\n            G.gameManager.forceChangeTurn();\n            G.roomSocket.emit('force change turn');\n        } else if (!selfMoveAble && !oppoMoveAble) {\n            cc.log('both can not move someone win');\n            G.gameManager.endGame();\n        }\n    },\n\n    getChessCount: function getChessCount() {\n        var blackChess = 0;\n        var whiteChess = 0;\n        for (var x = 0; x < this.chesses.length; x++) {\n            for (var y = 0; y < this.chesses[x].length; y++) {\n                if (this.chesses[x][y].type === CHESS_TYPE.BLACK) {\n                    blackChess++;\n                } else if (this.chesses[x][y].type === CHESS_TYPE.WHITE) {\n                    whiteChess++;\n                }\n            }\n        }\n        return [blackChess, whiteChess];\n    }\n});\n\ncc._RFpop();","require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({\"ChessManager\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, 'fd23biEYxBN7IoWrlheRQaR', 'ChessManager');\n// scripts\\manager\\ChessManager.js\n\nvar Constants = require('Constants');\nvar CHESS_TYPE = Constants.CHESS_TYPE;\nvar STAND = Constants.STAND;\nvar GAME_STATE = Constants.GAME_STATE;\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        COL: 8,\n        ROW: 8,\n        chessPrefab: cc.Prefab,\n        chesses: []\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        G.chessManager = this;\n        this.chessWidth = this.node.width / this.COL;\n        for (var x = 0; x < this.COL; x++) {\n            this.chesses[x] = [];\n            for (var y = 0; y < this.ROW; y++) {\n                var chessNode = cc.instantiate(this.chessPrefab);\n                chessNode.parent = this.node;\n                chessNode.width = this.chessWidth - 5;\n                chessNode.height = this.chessWidth - 5;\n                chessNode.position = cc.p(this.chessWidth / 2 + x * this.chessWidth, this.chessWidth / 2 + y * this.chessWidth);\n                var chess = chessNode.getComponent('Chess');\n                chess.coor = cc.p(x, y);\n                this.chesses[x][y] = chess;\n                this.addTouchEvent(chess);\n            }\n        }\n        this.chesses[3][3].type = CHESS_TYPE.BLACK;\n        this.chesses[3][4].type = CHESS_TYPE.WHITE;\n        this.chesses[4][4].type = CHESS_TYPE.BLACK;\n        this.chesses[4][3].type = CHESS_TYPE.WHITE;\n        G.gameManager.startGame();\n        var self = this;\n        G.roomSocket.on('update chessboard', function (chessCoor) {\n            self.fallChess(self.chesses[chessCoor.x][chessCoor.y]);\n        });\n        G.roomSocket.on('change turn', function () {\n            G.gameManager.changeTurn();\n        });\n        G.roomSocket.on('force change turn', function () {\n            G.gameManager.forceChangeTurn();\n        });\n    },\n\n    addTouchEvent: function addTouchEvent(chess) {\n        var self = this;\n        chess.node.on('touchend', function (e) {\n            cc.log('!!!!!');\n            if (G.gameManager.gameState === GAME_STATE.PLAYING && G.gameManager.turn === G.stand) {\n                if (chess.type === CHESS_TYPE.NONE) {\n                    for (var dir = 1; dir <= 8; dir++) {\n                        if (self.judgePass(G.gameManager.turn, chess, dir)) {\n                            self.fallChess(chess);\n                            G.roomSocket.emit('update chessboard', chess.coor);\n                            break;\n                        }\n                        if (dir === 8) {\n                            return;\n                        }\n                    }\n                }\n            }\n        });\n    },\n\n    fallChess: function fallChess(chess) {\n        if (G.gameManager.turn === STAND.BLACK) {\n            chess.type = CHESS_TYPE.BLACK;\n        } else if (G.gameManager.turn === STAND.WHITE) {\n            chess.type = CHESS_TYPE.WHITE;\n        }\n        for (var dir = 1; dir <= 8; dir++) {\n            if (this.judgePass(G.gameManager.turn, chess, dir)) {\n                this.changePass(chess, dir);\n            }\n        }\n        G.gameManager.updateScore();\n        G.gameManager.changeTurn();\n        this.judgeWin();\n    },\n\n    nearChess: function nearChess(chess, dir) {\n        switch (dir) {\n            case 1:\n                //left\n                if (chess.coor.x !== 0) {\n                    return this.chesses[chess.coor.x - 1][chess.coor.y];\n                }\n                break;\n            case 2:\n                //left up\n                if (chess.coor.x !== 0 && chess.coor.y !== this.ROW - 1) {\n                    return this.chesses[chess.coor.x - 1][chess.coor.y + 1];\n                }\n                break;\n            case 3:\n                //up\n                if (chess.coor.y !== this.ROW - 1) {\n                    return this.chesses[chess.coor.x][chess.coor.y + 1];\n                }\n                break;\n            case 4:\n                //right up\n                if (chess.coor.x !== this.COL - 1 && chess.coor.y !== this.ROW - 1) {\n                    return this.chesses[chess.coor.x + 1][chess.coor.y + 1];\n                }\n                break;\n            case 5:\n                //right\n                if (chess.coor.x !== this.COL - 1) {\n                    return this.chesses[chess.coor.x + 1][chess.coor.y];\n                }\n                break;\n            case 6:\n                //right down\n                if (chess.coor.x !== this.COL - 1 && chess.coor.y !== 0) {\n                    return this.chesses[chess.coor.x + 1][chess.coor.y - 1];\n                }\n                break;\n            case 7:\n                //down\n                if (chess.coor.y !== 0) {\n                    return this.chesses[chess.coor.x][chess.coor.y - 1];\n                }\n                break;\n            case 8:\n                //left down\n                if (chess.coor.x !== 0 && chess.coor.y !== 0) {\n                    return this.chesses[chess.coor.x - 1][chess.coor.y - 1];\n                }\n                break;\n\n            default:\n                break;\n        }\n        return null;\n    },\n\n    judgePass: function judgePass(stand, chess, dir) {\n        var tempChess = chess;\n        tempChess = this.nearChess(chess, dir);\n        if (tempChess === null) {\n            return false;\n        }\n        while (tempChess.type === -stand) {\n            tempChess = this.nearChess(tempChess, dir);\n            if (tempChess === null) {\n                return false;\n            }\n            if (tempChess.type == stand) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    changePass: function changePass(chess, dir) {\n        var tempChess = this.nearChess(chess, dir);\n        while (tempChess.type === -G.gameManager.turn) {\n            tempChess.type = chess.type;\n            tempChess = this.nearChess(tempChess, dir);\n        }\n    },\n\n    judgeMoveAble: function judgeMoveAble(stand) {\n        //判断stand是否有可落子的地方\n        var tryChess = null;\n        for (var x = 0; x < this.COL; x++) {\n            for (var y = 0; y < this.ROW; y++) {\n                tryChess = this.chesses[x][y];\n                if (tryChess.type === CHESS_TYPE.NONE) {\n                    for (var dir = 1; dir <= 8; dir++) {\n                        if (this.judgePass(stand, tryChess, dir)) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    },\n\n    judgeWin: function judgeWin() {\n        var selfMoveAble = this.judgeMoveAble(G.gameManager.turn);\n        var oppoMoveAble = this.judgeMoveAble(-G.gameManager.trun);\n        if (selfMoveAble) {\n            return;\n        } else if (!selfMoveAble && oppoMoveAble) {\n            cc.log('can not move next turn');\n            G.gameManager.forceChangeTurn();\n            G.roomSocket.emit('force change turn');\n        } else if (!selfMoveAble && !oppoMoveAble) {\n            cc.log('both can not move someone win');\n            G.gameManager.endGame();\n        }\n    },\n\n    getChessCount: function getChessCount() {\n        var blackChess = 0;\n        var whiteChess = 0;\n        for (var x = 0; x < this.chesses.length; x++) {\n            for (var y = 0; y < this.chesses[x].length; y++) {\n                if (this.chesses[x][y].type === CHESS_TYPE.BLACK) {\n                    blackChess++;\n                } else if (this.chesses[x][y].type === CHESS_TYPE.WHITE) {\n                    whiteChess++;\n                }\n            }\n        }\n        return [blackChess, whiteChess];\n    }\n});\n\ncc._RFpop();\n},{\"Constants\":\"Constants\"}],\"Chess\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '038ecKdx7hAFbMdQrCbLy4q', 'Chess');\n// scripts\\cell\\Chess.js\n\nvar Constants = require('Constants');\nvar CHESS_TYPE = Constants.CHESS_TYPE;\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        pics: {\n            'default': [],\n            type: [cc.SpriteFrame]\n        },\n        _type: CHESS_TYPE.NONE,\n        type: {\n            get: function get() {\n                return this._type;\n            },\n            set: function set(value) {\n                this._type = value;\n                if (value === CHESS_TYPE.BLACK) {\n                    this.getComponent(cc.Sprite).spriteFrame = this.pics[0];\n                } else if (value === CHESS_TYPE.WHITE) {\n                    this.getComponent(cc.Sprite).spriteFrame = this.pics[1];\n                } else {\n                    this.getComponent(cc.Sprite).spriteFrame = null;\n                }\n            }\n        },\n        coor: cc.p(0, 0), //坐标\n        chance: 0 //周围可翻转棋子的可能性\n    },\n\n    onLoad: function onLoad() {\n        this.type = CHESS_TYPE.NONE;\n    }\n\n});\n\ncc._RFpop();\n},{\"Constants\":\"Constants\"}],\"Constants\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '12eb7dOVPtKGbYm/iRgXp8a', 'Constants');\n// scripts\\util\\Constants.js\n\nvar STAND = cc.Enum({\n    BLACK: 47,\n    WHITE: -47\n});\n\nvar CHESS_TYPE = cc.Enum({\n    NONE: -1,\n    BLACK: 47,\n    WHITE: -47\n});\n\nvar GAME_STATE = cc.Enum({\n    PREPARE: -1,\n    PLAYING: -1,\n    OVER: -1\n});\n\nvar DIR = cc.Enum({\n    LEFT: -1,\n    LEFT_UP: -1,\n    UP: -1,\n    RIGHT_UP: -1,\n    RIGHT: -1,\n    RIGHT_DOWN: -1,\n    DOWN: -1,\n    LEFT_DOWN: -1\n});\n\nmodule.exports = {\n    STAND: STAND,\n    CHESS_TYPE: CHESS_TYPE,\n    GAME_STATE: GAME_STATE,\n    DIR: DIR\n};\n\ncc._RFpop();\n},{}],\"GameManager\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, 'e993eESIzFLR5rQMdFCiYnH', 'GameManager');\n// scripts\\manager\\GameManager.js\n\nvar Constants = require('Constants');\nvar GAME_STATE = Constants.GAME_STATE;\nvar STAND = Constants.STAND;\nvar CHESS_TYPE = Constants.CHESS_TYPE;\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        gameState: {\n            'default': GAME_STATE.PREPARE,\n            type: GAME_STATE\n        },\n        turn: {\n            'default': STAND.BLACK,\n            type: STAND\n        },\n        blackScoreLabel: cc.Label,\n        whiteScoreLabel: cc.Label,\n        infoPanel: cc.Node,\n        infoLabel: cc.Label\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        G.gameManager = this;\n        // G.roomSocket.removeAllListeners();\n        this.infoAnimation = this.infoPanel.getComponent(cc.Animation);\n    },\n\n    startGame: function startGame() {\n        this.turn = STAND.BLACK;\n        this.gameState = GAME_STATE.PLAYING;\n        this.showInfo('start game');\n    },\n\n    endGame: function endGame() {\n        var onFinished = function onFinished() {\n            G.roomSocket.disconnect();\n            cc.director.loadScene('menu');\n        };\n        this.infoAnimation.on('finished', onFinished, this);\n        this.gameState = GAME_STATE.OVER;\n        this.showInfo('game over');\n    },\n\n    changeTurn: function changeTurn() {\n        if (this.turn === STAND.BLACK) {\n            this.turn = STAND.WHITE;\n        } else if (this.turn === STAND.WHITE) {\n            this.turn = STAND.BLACK;\n        }\n    },\n\n    forceChangeTurn: function forceChangeTurn() {\n        //无子可下换边\n        this.showInfo('force change turn');\n        this.changeTurn();\n    },\n\n    updateScore: function updateScore() {\n        var chessCount = G.chessManager.getChessCount();\n        var blackChess = chessCount[0];\n        var whiteChess = chessCount[1];\n        this.blackScoreLabel.string = blackChess + '';\n        this.whiteScoreLabel.string = whiteChess + '';\n    },\n\n    showInfo: function showInfo(type) {\n        var chessCount = G.chessManager.getChessCount();\n        var blackChess = chessCount[0];\n        var whiteChess = chessCount[1];\n        if (type === 'start game') {\n            if (G.stand === STAND.BLACK) {\n                this.infoLabel.string = '你是蓝色方\\n执黑棋先手';\n            } else if (G.stand === STAND.WHITE) {\n                this.infoLabel.string = '你是红色方\\n执白棋后手';\n            }\n        } else if (type === 'game over') {\n            if (blackChess > whiteChess) {\n                this.infoLabel.string = '游戏结束\\n黑棋胜';\n            } else if (blackChess < whiteChess) {\n                this.infoLabel.string = '游戏结束\\n白棋胜';\n            } else if (blackChess === whiteChess) {\n                this.infoLabel.string = '游戏结束\\n平局';\n            }\n        } else if (type === 'force change turn') {\n            if (G.stand === STAND.BLACK) {\n                this.infoLabel.string = '黑方无子可下\\n请白方下子';\n            } else if (G.stand === STAND.WHITE) {\n                this.infoLabel.string = '白方无子可下\\n请黑方下子';\n            }\n        }\n        this.infoAnimation.play();\n    }\n\n});\n\ncc._RFpop();\n},{\"Constants\":\"Constants\"}],\"Global\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '04fd0MxwapHrYsfCAT2HRS8', 'Global');\n// scripts\\util\\Global.js\n\n// window.mio = require('socket.io');\n\nwindow.G = {\n    globalSocket: null,\n    hallSocket: null,\n    queueSocket: null,\n    roomSocket: null,\n    gameManager: null,\n    chessManager: null,\n    stand: null\n};\n\ncc._RFpop();\n},{}],\"MatchManager\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '6737dPBUENHLazdKLnt/lX8', 'MatchManager');\n// scripts\\manager\\MatchManager.js\n\nvar Constants = require('Constants');\nvar STAND = Constants.STAND;\ncc.Class({\n    'extends': cc.Component,\n\n    onLoad: function onLoad() {\n        G.queueSocket = io.connect('119.29.40.244:4747/queue', { 'force new connection': true });\n        G.queueSocket.on('set stand', function (stand) {\n            if (stand === 'black') {\n                G.stand = STAND.BLACK;\n            } else if (stand === 'white') {\n                G.stand = STAND.WHITE;\n            }\n        });\n        G.queueSocket.on('match success', function (roomId) {\n            cc.log('match success' + roomId);\n            G.roomSocket = io.connect('119.29.40.244:4747/rooms' + roomId, { 'force new connection': true });\n            // G.queueSocket.emit('enter room');\n            // G.queueSocket.removeAllListeners();\n            G.queueSocket.disconnect();\n            cc.director.loadScene('game');\n        });\n    },\n\n    onBtnCancel: function onBtnCancel() {\n        // G.queueSocket.emit('cancel match');\n        // G.queueSocket.removeAllListeners();\n        G.queueSocket.disconnect();\n        cc.director.loadScene('menu');\n    }\n});\n\ncc._RFpop();\n},{\"Constants\":\"Constants\"}],\"MenuManager\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, 'dbed4TWiO9G8rOPLhxoyUSx', 'MenuManager');\n// scripts\\manager\\MenuManager.js\n\ncc.Class({\n    'extends': cc.Component,\n\n    onLoad: function onLoad() {\n        G.globalSocket = io.connect('119.29.40.244:4747');\n        G.hallSocket = io.connect('119.29.40.244:4747/hall', { 'force new connection': true });\n        // G.globalSocket = io.connect('23.106.147.78:4747');\n    },\n\n    onBtnStart: function onBtnStart() {\n        // G.hallSocket.emit('enter queue');\n        // G.hallSocket.removeAllListeners();\n        G.hallSocket.disconnect();\n        cc.director.loadScene('match');\n    }\n});\n\ncc._RFpop();\n},{}]},{},[\"Global\",\"Constants\",\"MenuManager\",\"GameManager\",\"ChessManager\",\"Chess\",\"MatchManager\"])\n\n","\"use strict\";\ncc._RFpush(module, '038ecKdx7hAFbMdQrCbLy4q', 'Chess');\n// scripts\\cell\\Chess.js\n\nvar Constants = require('Constants');\nvar CHESS_TYPE = Constants.CHESS_TYPE;\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        pics: {\n            'default': [],\n            type: [cc.SpriteFrame]\n        },\n        _type: CHESS_TYPE.NONE,\n        type: {\n            get: function get() {\n                return this._type;\n            },\n            set: function set(value) {\n                this._type = value;\n                if (value === CHESS_TYPE.BLACK) {\n                    this.getComponent(cc.Sprite).spriteFrame = this.pics[0];\n                } else if (value === CHESS_TYPE.WHITE) {\n                    this.getComponent(cc.Sprite).spriteFrame = this.pics[1];\n                } else {\n                    this.getComponent(cc.Sprite).spriteFrame = null;\n                }\n            }\n        },\n        coor: cc.p(0, 0), //坐标\n        chance: 0 //周围可翻转棋子的可能性\n    },\n\n    onLoad: function onLoad() {\n        this.type = CHESS_TYPE.NONE;\n    }\n\n});\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, '12eb7dOVPtKGbYm/iRgXp8a', 'Constants');\n// scripts\\util\\Constants.js\n\nvar STAND = cc.Enum({\n    BLACK: 47,\n    WHITE: -47\n});\n\nvar CHESS_TYPE = cc.Enum({\n    NONE: -1,\n    BLACK: 47,\n    WHITE: -47\n});\n\nvar GAME_STATE = cc.Enum({\n    PREPARE: -1,\n    PLAYING: -1,\n    OVER: -1\n});\n\nvar DIR = cc.Enum({\n    LEFT: -1,\n    LEFT_UP: -1,\n    UP: -1,\n    RIGHT_UP: -1,\n    RIGHT: -1,\n    RIGHT_DOWN: -1,\n    DOWN: -1,\n    LEFT_DOWN: -1\n});\n\nmodule.exports = {\n    STAND: STAND,\n    CHESS_TYPE: CHESS_TYPE,\n    GAME_STATE: GAME_STATE,\n    DIR: DIR\n};\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, 'e993eESIzFLR5rQMdFCiYnH', 'GameManager');\n// scripts\\manager\\GameManager.js\n\nvar Constants = require('Constants');\nvar GAME_STATE = Constants.GAME_STATE;\nvar STAND = Constants.STAND;\nvar CHESS_TYPE = Constants.CHESS_TYPE;\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        gameState: {\n            'default': GAME_STATE.PREPARE,\n            type: GAME_STATE\n        },\n        turn: {\n            'default': STAND.BLACK,\n            type: STAND\n        },\n        blackScoreLabel: cc.Label,\n        whiteScoreLabel: cc.Label,\n        infoPanel: cc.Node,\n        infoLabel: cc.Label\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        G.gameManager = this;\n        // G.roomSocket.removeAllListeners();\n        this.infoAnimation = this.infoPanel.getComponent(cc.Animation);\n    },\n\n    startGame: function startGame() {\n        this.turn = STAND.BLACK;\n        this.gameState = GAME_STATE.PLAYING;\n        this.showInfo('start game');\n    },\n\n    endGame: function endGame() {\n        var onFinished = function onFinished() {\n            G.roomSocket.disconnect();\n            cc.director.loadScene('menu');\n        };\n        this.infoAnimation.on('finished', onFinished, this);\n        this.gameState = GAME_STATE.OVER;\n        this.showInfo('game over');\n    },\n\n    changeTurn: function changeTurn() {\n        if (this.turn === STAND.BLACK) {\n            this.turn = STAND.WHITE;\n        } else if (this.turn === STAND.WHITE) {\n            this.turn = STAND.BLACK;\n        }\n    },\n\n    forceChangeTurn: function forceChangeTurn() {\n        //无子可下换边\n        this.showInfo('force change turn');\n        this.changeTurn();\n    },\n\n    updateScore: function updateScore() {\n        var chessCount = G.chessManager.getChessCount();\n        var blackChess = chessCount[0];\n        var whiteChess = chessCount[1];\n        this.blackScoreLabel.string = blackChess + '';\n        this.whiteScoreLabel.string = whiteChess + '';\n    },\n\n    showInfo: function showInfo(type) {\n        var chessCount = G.chessManager.getChessCount();\n        var blackChess = chessCount[0];\n        var whiteChess = chessCount[1];\n        if (type === 'start game') {\n            if (G.stand === STAND.BLACK) {\n                this.infoLabel.string = '你是蓝色方\\n执黑棋先手';\n            } else if (G.stand === STAND.WHITE) {\n                this.infoLabel.string = '你是红色方\\n执白棋后手';\n            }\n        } else if (type === 'game over') {\n            if (blackChess > whiteChess) {\n                this.infoLabel.string = '游戏结束\\n黑棋胜';\n            } else if (blackChess < whiteChess) {\n                this.infoLabel.string = '游戏结束\\n白棋胜';\n            } else if (blackChess === whiteChess) {\n                this.infoLabel.string = '游戏结束\\n平局';\n            }\n        } else if (type === 'force change turn') {\n            if (G.stand === STAND.BLACK) {\n                this.infoLabel.string = '黑方无子可下\\n请白方下子';\n            } else if (G.stand === STAND.WHITE) {\n                this.infoLabel.string = '白方无子可下\\n请黑方下子';\n            }\n        }\n        this.infoAnimation.play();\n    }\n\n});\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, '04fd0MxwapHrYsfCAT2HRS8', 'Global');\n// scripts\\util\\Global.js\n\n// window.mio = require('socket.io');\n\nwindow.G = {\n    globalSocket: null,\n    hallSocket: null,\n    queueSocket: null,\n    roomSocket: null,\n    gameManager: null,\n    chessManager: null,\n    stand: null\n};\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, '6737dPBUENHLazdKLnt/lX8', 'MatchManager');\n// scripts\\manager\\MatchManager.js\n\nvar Constants = require('Constants');\nvar STAND = Constants.STAND;\ncc.Class({\n    'extends': cc.Component,\n\n    onLoad: function onLoad() {\n        G.queueSocket = io.connect('119.29.40.244:4747/queue', { 'force new connection': true });\n        G.queueSocket.on('set stand', function (stand) {\n            if (stand === 'black') {\n                G.stand = STAND.BLACK;\n            } else if (stand === 'white') {\n                G.stand = STAND.WHITE;\n            }\n        });\n        G.queueSocket.on('match success', function (roomId) {\n            cc.log('match success' + roomId);\n            G.roomSocket = io.connect('119.29.40.244:4747/rooms' + roomId, { 'force new connection': true });\n            // G.queueSocket.emit('enter room');\n            // G.queueSocket.removeAllListeners();\n            G.queueSocket.disconnect();\n            cc.director.loadScene('game');\n        });\n    },\n\n    onBtnCancel: function onBtnCancel() {\n        // G.queueSocket.emit('cancel match');\n        // G.queueSocket.removeAllListeners();\n        G.queueSocket.disconnect();\n        cc.director.loadScene('menu');\n    }\n});\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, 'dbed4TWiO9G8rOPLhxoyUSx', 'MenuManager');\n// scripts\\manager\\MenuManager.js\n\ncc.Class({\n    'extends': cc.Component,\n\n    onLoad: function onLoad() {\n        G.globalSocket = io.connect('119.29.40.244:4747');\n        G.hallSocket = io.connect('119.29.40.244:4747/hall', { 'force new connection': true });\n        // G.globalSocket = io.connect('23.106.147.78:4747');\n    },\n\n    onBtnStart: function onBtnStart() {\n        // G.hallSocket.emit('enter queue');\n        // G.hallSocket.removeAllListeners();\n        G.hallSocket.disconnect();\n        cc.director.loadScene('match');\n    }\n});\n\ncc._RFpop();"],"sourceRoot":"/source/"}